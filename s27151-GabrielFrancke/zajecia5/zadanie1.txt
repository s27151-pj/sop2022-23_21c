1.

#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>

int main() {

    printf("PID: %d\n", getpid()); //  PID 
    printf("PPID: %d\n", getppid()); //  PPID

    char input[256];
    printf("Oczekiwanie na dane od użytkownika...\n");
    fgets(input, sizeof(input), stdin);

    return 0;
}

2.

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>

int main() {
    pid_t pid = fork(); 

    if (pid < 0) {
        fprintf(stderr, "Blad fork()\n");
        return 1;
    } else if (pid == 0) {
        printf("Proces potomny:\n");
        printf("PID: %d\n", getpid());
        printf("PPID: %d\n", getppid());
    } else {
        printf("Proces rodzica:\n");
        printf("PID: %d\n", getpid());
        printf("PPID: %d\n", getppid());

        wait(NULL);
    }

    return 0;
}

3.

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Podaj wartość: \n");
        return 1;
    }
    int n = atoi(argv[1]);
    pid_t pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Blad fork()\n");
        return 1;
    } else if (pid == 0) {

        printf("Proces potomny:\n");
        for (int i = 1; i <= n; i += 2) {
            printf("%d ", i);
        }
        printf("\n");
    } else {
        printf("Proces rodzica:\n");
        int sum = 0;
        for (int i = 0; i <= n; i++) {
            sum += i;
        }
        printf("Suma: %d\n", sum);
        wait(NULL);
    }

    return 0;
}

4.

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>

int main() {
    for (int i = 1; i <= 100; i++) {
        pid_t pid = fork();

        if (pid < 0) {
            fprintf(stderr, "Błąd fork()\n");
            return 1;
        } else if (pid == 0) {
            printf("Proces potomka %d: PID = %d, PPID = %d\n", i, getpid(), getppid());
            if (i == 100) {
                break;
            }
        } else {
            wait(NULL);
            break;
        }
    }

    return 0;
}

5.

#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    for (int i = 1; i <= 100; i++) {
        pid_t pid = fork();

        if (pid < 0) {
            fprintf(stderr, "Blad fork()\n");
            return 1;
        } else if (pid == 0) {
            printf("Proces potomka %d: PID = %d, PPID = %d\n", i, getpid(), getppid());
            return 0;
        }
    }

    for (int i = 1; i <= 100; i++) {
        wait(NULL);
    }

    return 0;
}

6.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>

#define MAX_MESSAGE_SIZE 256

int main() {
    char chatFile[] = "/tmp/chat.txt";

    int chatFd = open(chatFile, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    if (chatFd == -1) {
        fprintf(stderr, "Blad chatu\n");
        return 1;
    }

    pid_t pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Blad fork()\n");
        return 1;
    } else if (pid == 0) {
        char message[MAX_MESSAGE_SIZE];

        while (1) {
            lseek(chatFd, 0, SEEK_SET);
            ssize_t bytesRead = read(chatFd, message, sizeof(message));
            if (bytesRead == -1) {
                fprintf(stderr, "Blad wiadomosci\n");
                return 1;
            }

            if (bytesRead > 0) {
                printf("Odebrano wiadomosci: %s\n", message);
            }

            usleep(500000);
        }
    } else {
        char message[MAX_MESSAGE_SIZE];

        while (1) {
            printf("Wprowadz wiadomosc: ");
            fgets(message, sizeof(message), stdin);

            size_t len = strlen(message);
            if (len > 0 && message[len - 1] == '\n') {
                message[len - 1] = '\0';
            }

            lseek(chatFd, 0, SEEK_SET);
            ssize_t bytesWritten = write(chatFd, message, strlen(message));
            if (bytesWritten == -1) {
                fprintf(stderr, "Blad wiadomosci\n");
                return 1;
            }

            usleep(500000);
        }
    }

    close(chatFd);

    return 0;
}


